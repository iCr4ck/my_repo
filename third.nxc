//Definieren der Schwellenwerte
#define THRESHOLD 50
#define STATE_INIT 0
#define STATE_SAFE_ON_TABLE 1
#define STATE_DETECTED_EDGE 2
#define STATE_DETECTED_OBJECT 3
#define NEAR 20
#define STATE_STOP 4


//Initialisierungsfunktion zur Erkennung der Sensoren
int initialize(){
    SetSensorLight(IN_1);
    SetSensorLight(IN_2);
    SetSensorLight(IN_3);
    SetSensorUltrasonic(IN_4);
    return STATE_SAFE_ON_TABLE;
}

int drive(){
    OnFwd(OUT_AB,50);
    if (Sensor(IN_1) < THRESHOLD && Sensor(IN_2) >= THRESHOLD){
       return STATE_DETECTED_EDGE;
    }
    if (Sensor(IN_2) < THRESHOLD && Sensor(IN_1) >= THRESHOLD){
       return STATE_DETECTED_EDGE;
    }
    if (SensorUS(IN_4) < NEAR) {
       return STATE_DETECTED_OBJECT;
    }
    return STATE_SAFE_ON_TABLE;
}

int correctLane(){

    while(Sensor(IN_1) < THRESHOLD){
         while(Sensor(IN_3) < 35 && Sensor(IN_2) < THRESHOLD){
            Off(OUT_AB);
         }
         OnFwd(OUT_A,80);
         OnRev(OUT_B,50);
         OnFwd(OUT_AB,30);
    }
    while(Sensor(IN_2) < THRESHOLD) {
         OnFwd(OUT_B,50);
         OnRev(OUT_A,50);
         OnFwd(OUT_AB,30);
    }
    return STATE_SAFE_ON_TABLE;
}

int detectedObject(){
    while(SensorUS(IN_4) < NEAR){
         Off(OUT_AB);
    }
    return STATE_SAFE_ON_TABLE;
}




int state = STATE_INIT;



//Hauptfunktion
task main(){
     while(true){
                 if(state == STATE_INIT) {
                          OnFwd(OUT_AB,50);
                          Wait(1000);
                          OnFwd(OUT_A,50);
                          OnRev(OUT_B,50);
                          Wait(100);
                          state = initialize();
                 }
                 if(state == STATE_SAFE_ON_TABLE) {
                          state = drive();
                 }
                 if(state == STATE_DETECTED_EDGE) {
                          while(Sensor(IN_3) < 35 && Sensor(IN_1) > THRESHOLD && Sensor(IN_2) > THRESHOLD){
                              Off(OUT_AB);
                          }
                          state = correctLane();
                 }
                 if(state == STATE_DETECTED_OBJECT){
                          state = detectedObject();
                 }

     }
}
